{
	"info": {
		"_postman_id": "76e8b2cc-b2b2-4a80-84e6-6eefbdc6d655",
		"name": "dein-li",
		"description": "OpenAPI specification for dein.li - Kurzlink\n\nContact Support:\n Name: Seba Momann\n Email: support@dein.li",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "links",
			"item": [
				{
					"name": "create link",
					"item": [
						{
							"name": "no auth",
							"item": [
								{
									"name": "create link - success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"creation_original\", pm.variables.replaceIn(\"{{$randomUrl}}\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"short\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"short\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Short has length of 7\", function () {\r",
													"    pm.expect(jsonData.short).lengthOf(7);\r",
													"});\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/links/\" + jsonData.short);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"validate_createlink_location_header\", pm.response.headers.get(\"Location\"));\r",
													"pm.collectionVariables.set(\"validate_createlink_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"validate_createlink_short\", jsonData.short);\r",
													"pm.collectionVariables.set(\"validate_createlink_original\", pm.variables.get(\"creation_original\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{creation_original}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											]
										},
										"description": "Create a new link"
									},
									"response": [
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": 409,\n \"code\": \"DUPLICATE_VALUES\",\n \"message\": \"Provided values are already in use\",\n \"data\": [\n  {\n   \"attribute\": \"short\",\n   \"value\": \"myShortLink\"\n  }\n ]\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "location",
													"value": "minim aute et nulla",
													"description": "URL to the created resource."
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:278572c9-1a54-a07f-9887-6c282f339eea\",\n \"short\": \"myShortLink\"\n}"
										}
									]
								},
								{
									"name": "validate - get created link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const schema = JSON.parse(pm.variables.get(\"schema_link\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"validate_createlink_id\"));\r",
													"    pm.expect(jsonData.short).to.eql(pm.collectionVariables.get(\"validate_createlink_short\"));\r",
													"    pm.expect(jsonData.original).to.eql(pm.collectionVariables.get(\"validate_createlink_original\"));\r",
													"    pm.expect(jsonData.status).to.eql(\"ACTIVE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{validate_createlink_location_header}}",
											"host": [
												"{{validate_createlink_location_header}}"
											]
										},
										"description": "Returns link by the specified short link"
									},
									"response": [
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Link entity",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:8cc73508-8c44-b585-4eb2-d66b4588e0db\",\n \"short\": \"sint proident\",\n \"original\": \"L\",\n \"status\": \"ACTIVE\",\n \"iat\": \"2009-06-15\",\n \"nrOfCalls\": 7052842\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "create Link - failure - custom short (login needed)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"creation_original\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
													"pm.variables.set(\"creation_short\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Failed POST request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"FORBIDDEN_ATTRIBUTES\",\r",
													"        \"message\": \"Specified values can only be set by authorized users. Please login and try again.\",\r",
													"        \"data\": [\r",
													"            \"short\"\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{creation_original}}\",\n    \"short\" : \"{{creation_short}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											]
										},
										"description": "Create a new link"
									},
									"response": [
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "location",
													"value": "minim aute et nulla",
													"description": "URL to the created resource."
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:278572c9-1a54-a07f-9887-6c282f339eea\",\n \"short\": \"myShortLink\"\n}"
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": 409,\n \"code\": \"DUPLICATE_VALUES\",\n \"message\": \"Provided values are already in use\",\n \"data\": [\n  {\n   \"attribute\": \"short\",\n   \"value\": \"myShortLink\"\n  }\n ]\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "auth",
							"item": [
								{
									"name": "create Link - success (custom short)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"creation_original\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
													"pm.variables.set(\"creation_short\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"short\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"short\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Short has set value\", function () {\r",
													"    pm.expect(jsonData.short).to.equal(pm.variables.get(\"creation_short\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/links/\" + jsonData.short);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"validate_createlink_location_header\", pm.response.headers.get(\"Location\"));\r",
													"pm.collectionVariables.set(\"validate_createlink_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"validate_createlink_short\", jsonData.short);\r",
													"pm.collectionVariables.set(\"validate_createlink_original\", pm.variables.get(\"creation_original\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{creation_original}}\",\n    \"short\": \"{{creation_short}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											]
										},
										"description": "Create a new link"
									},
									"response": [
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "location",
													"value": "minim aute et nulla",
													"description": "URL to the created resource."
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:278572c9-1a54-a07f-9887-6c282f339eea\",\n \"short\": \"myShortLink\"\n}"
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": 409,\n \"code\": \"DUPLICATE_VALUES\",\n \"message\": \"Provided values are already in use\",\n \"data\": [\n  {\n   \"attribute\": \"short\",\n   \"value\": \"myShortLink\"\n  }\n ]\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "validate - get created link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const schema = JSON.parse(pm.variables.get(\"schema_link\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"validate_createlink_id\"));\r",
													"    pm.expect(jsonData.short).to.eql(pm.collectionVariables.get(\"validate_createlink_short\"));\r",
													"    pm.expect(jsonData.original).to.eql(pm.collectionVariables.get(\"validate_createlink_original\"));\r",
													"    pm.expect(jsonData.status).to.eql(\"ACTIVE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{validate_createlink_location_header}}",
											"host": [
												"{{validate_createlink_location_header}}"
											]
										},
										"description": "Returns link by the specified short link"
									},
									"response": [
										{
											"name": "Link entity",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:8cc73508-8c44-b585-4eb2-d66b4588e0db\",\n \"short\": \"sint proident\",\n \"original\": \"L\",\n \"status\": \"ACTIVE\",\n \"iat\": \"2009-06-15\",\n \"nrOfCalls\": 7052842\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "create Link - failure - invalid short",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"creation_original\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
													"pm.variables.set(\"creation_short\", pm.variables.replaceIn(\"invalid%&symbols~\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Failed POST request\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INVALID_ATTRIBUTES\",\r",
													"        \"message\": \"Given attributes can not be processed\",\r",
													"        \"data\": [\r",
													"            {\r",
													"                \"attribute\": \"short\",\r",
													"                \"value\": pm.variables.get(\"creation_short\"),\r",
													"                \"message\": \"Invalid format. The required format is '^[a-zA-Z0-9-_]*$'\"\r",
													"            }\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{creation_original}}\",\n    \"short\": \"{{creation_short}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											]
										},
										"description": "Create a new link"
									},
									"response": [
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "location",
													"value": "minim aute et nulla",
													"description": "URL to the created resource."
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:278572c9-1a54-a07f-9887-6c282f339eea\",\n \"short\": \"myShortLink\"\n}"
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": 409,\n \"code\": \"DUPLICATE_VALUES\",\n \"message\": \"Provided values are already in use\",\n \"data\": [\n  {\n   \"attribute\": \"short\",\n   \"value\": \"myShortLink\"\n  }\n ]\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "create Link - failure - duplicate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"creation_original\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
													"pm.variables.set(\"creation_short\", pm.variables.replaceIn(\"test-createlink-existingshort-short\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Failed POST request\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"DUPLICATE_VALUES\",\r",
													"        \"message\": \"Provided values are already in use\",\r",
													"        \"data\": [\r",
													"            {\r",
													"                \"attribute\": \"short\",\r",
													"                \"value\": pm.variables.get(\"creation_short\"),\r",
													"                \"message\": \"Value is already in use by other user. Specify a new one\"\r",
													"            }\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{creation_original}}\",\n    \"short\": \"{{creation_short}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											]
										},
										"description": "Create a new link"
									},
									"response": [
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "location",
													"value": "minim aute et nulla",
													"description": "URL to the created resource."
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:278572c9-1a54-a07f-9887-6c282f339eea\",\n \"short\": \"myShortLink\"\n}"
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": 409,\n \"code\": \"DUPLICATE_VALUES\",\n \"message\": \"Provided values are already in use\",\n \"data\": [\n  {\n   \"attribute\": \"short\",\n   \"value\": \"myShortLink\"\n  }\n ]\n}"
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_createlink_auth}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_createlink_auth\");",
											"const password = pm.environment.get(\"keycloak_password_createlink_auth\");",
											"",
											"const tokenVariableName = 'bearer_createlink_auth';",
											"const tokenExpriyDateVariableName = 'bearer_createlink_auth_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "independent",
							"item": [
								{
									"name": "create link - failure - invalid URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"creation_original\", \"invalidURL\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INVALID_ATTRIBUTES\",\r",
													"        \"message\": \"Given attributes can not be processed\",\r",
													"        \"data\": [\r",
													"            {\r",
													"                \"attribute\": \"original\",\r",
													"                \"value\": pm.variables.get(\"creation_original\"),\r",
													"                \"message\": \"Invalid URL format\"\r",
													"            }\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{creation_original}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											]
										},
										"description": "Create a new link"
									},
									"response": [
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "location",
													"value": "minim aute et nulla",
													"description": "URL to the created resource."
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:278572c9-1a54-a07f-9887-6c282f339eea\",\n \"short\": \"myShortLink\"\n}"
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": 409,\n \"code\": \"DUPLICATE_VALUES\",\n \"message\": \"Provided values are already in use\",\n \"data\": [\n  {\n   \"attribute\": \"short\",\n   \"value\": \"myShortLink\"\n  }\n ]\n}"
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"short\": \"myshortlink\",\n    \"original\": \"https://dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "{short}",
					"item": [
						{
							"name": "get link by short",
							"item": [
								{
									"name": "get link by short - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const schema = JSON.parse(pm.variables.get(\"schema_link\"));\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"id\": \"8ffefe3c-5530-4e7a-b2b7-16f4a2220289\",\r",
													"        \"short\": pm.variables.get('getbyshort_short'),\r",
													"        \"original\": \"https://dein.li\",\r",
													"        \"nrOfCalls\": 0,\r",
													"        \"status\": \"ACTIVE\",\r",
													"        \"iat\": \"2021-02-06T17:38:17.000Z\",\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"getbyshort_short\", \"test-getbyshort-short\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/links/{{getbyshort_short}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{getbyshort_short}}"
											]
										},
										"description": "Returns link by the specified short link"
									},
									"response": [
										{
											"name": "Link entity",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:8cc73508-8c44-b585-4eb2-d66b4588e0db\",\n \"short\": \"sint proident\",\n \"original\": \"L\",\n \"status\": \"ACTIVE\",\n \"iat\": \"2009-06-15\",\n \"nrOfCalls\": 7052842\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "get link by short - failure 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Failed GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"short\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"getbyshort_short\")\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"getbyshort_short\", \"nonexistingshort\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/links/{{getbyshort_short}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{getbyshort_short}}"
											]
										},
										"description": "Returns link by the specified short link"
									},
									"response": [
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Link entity",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:8cc73508-8c44-b585-4eb2-d66b4588e0db\",\n \"short\": \"sint proident\",\n \"original\": \"L\",\n \"status\": \"ACTIVE\",\n \"iat\": \"2009-06-15\",\n \"nrOfCalls\": 7052842\n}"
										}
									]
								}
							]
						},
						{
							"name": "create version",
							"item": [
								{
									"name": "create version - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"validate_createversion_id\",  pm.variables.get(\"createversion_id\"));\r",
													"pm.collectionVariables.set(\"validate_createversion_short\", pm.variables.get(\"createversion_short\"));\r",
													"pm.collectionVariables.set(\"validate_createversion_original\", pm.variables.get(\"createversion_original\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// FIXED VALUES IN DATABASE\r",
													"pm.variables.set(\"createversion_id\", \"1b651bc0-84d7-4708-b5d5-c00abd41563d\");\r",
													"pm.variables.set(\"createversion_short\", pm.variables.replaceIn(\"test-createversion-short\"));\r",
													"\r",
													"pm.variables.set(\"createversion_original\", pm.variables.replaceIn(\"{{$randomUrl}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{createversion_original}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links/{{createversion_short}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{createversion_short}}"
											]
										},
										"description": "Create a new version for the specified link"
									},
									"response": [
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": -66910975.544241235,\n \"code\": \"laboris officia\",\n \"message\": \"velit ad occaecat reprehenderit\"\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "No content.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "validate - get created version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const schema = JSON.parse(pm.variables.get(\"schema_link\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.not.eql(pm.collectionVariables.get(\"validate_createversion_id\"));\r",
													"    pm.expect(jsonData.short).to.eql(pm.collectionVariables.get(\"validate_createversion_short\"));\r",
													"    pm.expect(jsonData.original).to.eql(pm.collectionVariables.get(\"validate_createversion_original\"));\r",
													"    pm.expect(jsonData.status).to.eql(\"ACTIVE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/links/{{validate_createversion_short}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{validate_createversion_short}}"
											]
										},
										"description": "Returns link by the specified short link"
									},
									"response": [
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Link entity",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"urn:uuid:8cc73508-8c44-b585-4eb2-d66b4588e0db\",\n \"short\": \"sint proident\",\n \"original\": \"L\",\n \"status\": \"ACTIVE\",\n \"iat\": \"2009-06-15\",\n \"nrOfCalls\": 7052842\n}"
										}
									]
								},
								{
									"name": "create version - failure - missing permissions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
													"        \"message\": \"Missing permissions to execute request\",\r",
													"        \"data\": [\r",
													"            {\r",
													"                \"attribute\": \"short\",\r",
													"                \"value\": pm.variables.get(\"createversion_short\"),\r",
													"                \"message\": \"Specified link is not in your ownership\"\r",
													"            }\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// FIXED VALUES IN DATABASE\r",
													"pm.variables.set(\"createversion_short\", pm.variables.replaceIn(\"test-createversion-missingpermissions-short\"));\r",
													"\r",
													"pm.variables.set(\"createversion_original\", pm.variables.replaceIn(\"{{$randomUrl}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{createversion_original}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links/{{createversion_short}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{createversion_short}}"
											]
										},
										"description": "Create a new version for the specified link"
									},
									"response": [
										{
											"name": "No content.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": -66910975.544241235,\n \"code\": \"laboris officia\",\n \"message\": \"velit ad occaecat reprehenderit\"\n}"
										}
									]
								},
								{
									"name": "create version - failure - not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"short\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"createversion_short\")\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"createversion_short\", pm.variables.replaceIn(\"nonexistentlink\"));\r",
													"pm.variables.set(\"createversion_original\", pm.variables.replaceIn(\"{{$randomUrl}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{createversion_original}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links/{{createversion_short}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{createversion_short}}"
											]
										},
										"description": "Create a new version for the specified link"
									},
									"response": [
										{
											"name": "No content.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": -66910975.544241235,\n \"code\": \"laboris officia\",\n \"message\": \"velit ad occaecat reprehenderit\"\n}"
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "create version - failure - invalidURL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INVALID_ATTRIBUTES\",\r",
													"        \"message\": \"Given attributes can not be processed\",\r",
													"        \"data\": [\r",
													"            {\r",
													"                \"attribute\": \"original\",\r",
													"                \"value\": pm.variables.get(\"createversion_original\"),\r",
													"                \"message\": \"Invalid URL format\"\r",
													"            }\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"createversion_short\", pm.variables.replaceIn(\"test-createversion-short\"));\r",
													"pm.variables.set(\"createversion_original\", pm.variables.replaceIn(\"invalidURL\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"original\": \"{{createversion_original}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/links/{{createversion_short}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{createversion_short}}"
											]
										},
										"description": "Create a new version for the specified link"
									},
									"response": [
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "No content.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": -66910975.544241235,\n \"code\": \"laboris officia\",\n \"message\": \"velit ad occaecat reprehenderit\"\n}"
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"original\": \"https://new.dein.li\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/links/:short",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_createversion}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_createversion\");",
											"const password = pm.environment.get(\"keycloak_password_createversion\");",
											"",
											"const tokenVariableName = 'bearer_createversion';",
											"const tokenExpriyDateVariableName = 'bearer_createversion_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "get link versions",
							"item": [
								{
									"name": "get Link Versions - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"array\",\r",
													"    \"items\": [ JSON.parse(pm.variables.get(\"schema_link\"))],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData).to.eql([\r",
													"        {\r",
													"            \"id\": \"d374ce65-6672-4227-bc9f-38ada6ff5664\",\r",
													"            \"short\": \"test-getversions-short\",\r",
													"            \"original\": \"https://version4.dein.li\",\r",
													"            \"nrOfCalls\": 0,\r",
													"            \"status\": \"ACTIVE\",\r",
													"            \"iat\": \"2021-02-11T17:57:53.000Z\"\r",
													"        },\r",
													"        {\r",
													"            \"id\": \"cc5701aa-7116-4ca9-a310-b2703440a70e\",\r",
													"            \"short\": \"test-getversions-short\",\r",
													"            \"original\": \"https://version3.dein.li\",\r",
													"            \"nrOfCalls\": 0,\r",
													"            \"status\": \"DEPRECATED\",\r",
													"            \"iat\": \"2021-02-10T17:57:53.000Z\"\r",
													"        },\r",
													"        {\r",
													"            \"id\": \"88e11b8f-1052-49aa-afe4-52e65e41f27e\",\r",
													"            \"short\": \"test-getversions-short\",\r",
													"            \"original\": \"https://version2.dein.li\",\r",
													"            \"nrOfCalls\": 0,\r",
													"            \"status\": \"DEPRECATED\",\r",
													"            \"iat\": \"2021-02-09T17:56:35.000Z\"\r",
													"        },\r",
													"        {\r",
													"            \"id\": \"3941d3af-f7ec-4674-8ba6-4d596b0c6844\",\r",
													"            \"short\": \"test-getversions-short\",\r",
													"            \"original\": \"https://version1.dein.li\",\r",
													"            \"nrOfCalls\": 0,\r",
													"            \"status\": \"DEPRECATED\",\r",
													"            \"iat\": \"2021-02-08T17:56:35.000Z\"\r",
													"        }\r",
													"    ]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"getversions_short\", pm.variables.replaceIn(\"test-getversions-short\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/links/{{getversions_short}}/versions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{getversions_short}}",
												"versions"
											]
										},
										"description": "Returns all versions of a given link"
									},
									"response": [
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/versions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"versions"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "List of all versions",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/versions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"versions"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"totalCalls\": -93114098.23467813,\n \"distinctCalls\": 57461635.62399888,\n \"calls\": {\n  \"count\": 82366215.9313392,\n  \"frame\": \"1948-04-19\"\n }\n}"
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/versions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"versions"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "get Link Versions - not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"short\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"getversions_short\")\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"getversions_short\", pm.variables.replaceIn(\"test-nonexistantshort-short\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/links/{{getversions_short}}/versions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{getversions_short}}",
												"versions"
											]
										},
										"description": "Returns all versions of a given link"
									},
									"response": [
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/versions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"versions"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "List of all versions",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/versions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"versions"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"totalCalls\": -93114098.23467813,\n \"distinctCalls\": 57461635.62399888,\n \"calls\": {\n  \"count\": 82366215.9313392,\n  \"frame\": \"1948-04-19\"\n }\n}"
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/versions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"versions"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_getversions}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_getversions\");",
											"const password = pm.environment.get(\"keycloak_password_getversions\");",
											"",
											"const tokenVariableName = 'bearer_getversions';",
											"const tokenExpriyDateVariableName = 'bearer_getversions_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "get link statistics",
							"item": [
								{
									"name": "get Link Statistics - success - 1 month in days",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = JSON.parse(pm.collectionVariables.get(\"schema_statistics\"));\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"total\": 1052,\r",
													"        \"distinctCalls\": 438,\r",
													"        \"calls\": [\r",
													"            {\r",
													"                \"iat\": \"2020-06-10T01:25:42.000Z\",\r",
													"                \"count\": 28\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-11T18:28:44.000Z\",\r",
													"                \"count\": 24\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-12T14:10:16.000Z\",\r",
													"                \"count\": 23\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-13T11:45:23.000Z\",\r",
													"                \"count\": 23\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-14T03:00:49.000Z\",\r",
													"                \"count\": 31\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-15T03:33:35.000Z\",\r",
													"                \"count\": 25\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-16T01:33:48.000Z\",\r",
													"                \"count\": 25\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-17T06:52:59.000Z\",\r",
													"                \"count\": 22\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-18T11:55:52.000Z\",\r",
													"                \"count\": 19\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-19T19:40:30.000Z\",\r",
													"                \"count\": 32\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-20T12:12:45.000Z\",\r",
													"                \"count\": 28\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-21T15:33:49.000Z\",\r",
													"                \"count\": 30\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-22T06:12:26.000Z\",\r",
													"                \"count\": 27\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-23T20:10:07.000Z\",\r",
													"                \"count\": 26\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-24T09:23:36.000Z\",\r",
													"                \"count\": 27\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-25T05:11:09.000Z\",\r",
													"                \"count\": 27\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-26T01:57:35.000Z\",\r",
													"                \"count\": 29\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-27T14:46:33.000Z\",\r",
													"                \"count\": 31\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-28T14:29:10.000Z\",\r",
													"                \"count\": 37\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-29T20:40:47.000Z\",\r",
													"                \"count\": 24\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-06-30T09:05:57.000Z\",\r",
													"                \"count\": 30\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-01T12:56:03.000Z\",\r",
													"                \"count\": 22\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-02T16:39:37.000Z\",\r",
													"                \"count\": 26\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-03T09:06:12.000Z\",\r",
													"                \"count\": 28\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-03T23:29:26.000Z\",\r",
													"                \"count\": 24\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-05T10:48:53.000Z\",\r",
													"                \"count\": 23\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-06T13:49:20.000Z\",\r",
													"                \"count\": 17\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-07T02:54:06.000Z\",\r",
													"                \"count\": 31\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-08T13:51:51.000Z\",\r",
													"                \"count\": 22\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-09T00:14:15.000Z\",\r",
													"                \"count\": 27\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-10T18:26:04.000Z\",\r",
													"                \"count\": 30\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-11T12:28:53.000Z\",\r",
													"                \"count\": 24\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-12T01:59:32.000Z\",\r",
													"                \"count\": 25\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-13T02:09:12.000Z\",\r",
													"                \"count\": 32\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-14T02:44:00.000Z\",\r",
													"                \"count\": 23\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-15T17:12:30.000Z\",\r",
													"                \"count\": 21\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-16T17:03:50.000Z\",\r",
													"                \"count\": 28\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-17T21:39:34.000Z\",\r",
													"                \"count\": 23\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-18T12:00:04.000Z\",\r",
													"                \"count\": 31\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-19T06:43:19.000Z\",\r",
													"                \"count\": 26\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-19T23:46:35.000Z\",\r",
													"                \"count\": 1\r",
													"            }\r",
													"        ],\r",
													"        \"format\": \"hour_one_day\"\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"getstatistics_short\", pm.variables.replaceIn(\"test-getstatistics-short\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/links/{{getstatistics_short}}/statistics?start=2020-06-10T00:00:00.000Z&end=2020-07-20T00:00:00.000Z&interval=days",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{getstatistics_short}}",
												"statistics"
											],
											"query": [
												{
													"key": "start",
													"value": "2020-06-10T00:00:00.000Z"
												},
												{
													"key": "end",
													"value": "2020-07-20T00:00:00.000Z"
												},
												{
													"key": "interval",
													"value": "days"
												}
											]
										},
										"description": "Returns call informations about the specified link"
									},
									"response": [
										{
											"name": "Statistics entity",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"totalCalls\": -93114098.23467813,\n \"distinctCalls\": 57461635.62399888,\n \"calls\": {\n  \"count\": 82366215.9313392,\n  \"frame\": \"1948-04-19\"\n }\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "get Link Statistics - success - 2 hours in minutes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = JSON.parse(pm.collectionVariables.get(\"schema_statistics\"));\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"total\": 92,\r",
													"        \"distinctCalls\": 82,\r",
													"        \"calls\": [\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:00:09.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:01:22.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:03:31.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:04:26.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:06:20.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:07:14.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:08:32.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:10:37.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:12:45.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:13:02.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:14:12.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:17:19.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:18:56.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:21:37.000Z\",\r",
													"                \"count\": 3\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:22:48.000Z\",\r",
													"                \"count\": 3\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:24:36.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:25:23.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:26:41.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:30:31.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:31:58.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:34:16.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:35:18.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:36:45.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:37:31.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:39:07.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:40:43.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:41:00.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:42:33.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:43:07.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:48:32.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:50:32.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T02:59:17.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:00:13.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:01:54.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:02:34.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:03:10.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:05:55.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:06:04.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:08:24.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:10:48.000Z\",\r",
													"                \"count\": 4\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:11:27.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:12:43.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:15:17.000Z\",\r",
													"                \"count\": 3\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:16:51.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:17:18.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:18:43.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:19:05.000Z\",\r",
													"                \"count\": 4\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:21:21.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:22:30.000Z\",\r",
													"                \"count\": 4\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:24:54.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:25:24.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:32:18.000Z\",\r",
													"                \"count\": 3\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:34:43.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:37:19.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:38:56.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:48:46.000Z\",\r",
													"                \"count\": 2\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:51:43.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:54:29.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:55:22.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:56:44.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:57:13.000Z\",\r",
													"                \"count\": 1\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-01T03:59:02.000Z\",\r",
													"                \"count\": 1\r",
													"            }\r",
													"        ],\r",
													"        \"format\": \"hour_one_day\"\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"getstatistics_short\", pm.variables.replaceIn(\"test-getstatistics-short\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/links/{{getstatistics_short}}/statistics?start=2021-01-01T02:00:00.000Z&end=2021-01-01T04:00:00.000Z&interval=minutes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{getstatistics_short}}",
												"statistics"
											],
											"query": [
												{
													"key": "start",
													"value": "2021-01-01T02:00:00.000Z"
												},
												{
													"key": "end",
													"value": "2021-01-01T04:00:00.000Z"
												},
												{
													"key": "interval",
													"value": "minutes"
												}
											]
										},
										"description": "Returns call informations about the specified link"
									},
									"response": [
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Statistics entity",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"totalCalls\": -93114098.23467813,\n \"distinctCalls\": 57461635.62399888,\n \"calls\": {\n  \"count\": 82366215.9313392,\n  \"frame\": \"1948-04-19\"\n }\n}"
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "get Link Statistics - success - 2 years in months",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = JSON.parse(pm.collectionVariables.get(\"schema_statistics\"));\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"total\": 11997,\r",
													"        \"distinctCalls\": 489,\r",
													"        \"calls\": [\r",
													"            {\r",
													"                \"iat\": \"2020-06-28T14:29:10.000Z\",\r",
													"                \"count\": 798\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-07-11T12:28:53.000Z\",\r",
													"                \"count\": 817\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-08-26T07:10:48.000Z\",\r",
													"                \"count\": 886\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-09-15T03:28:24.000Z\",\r",
													"                \"count\": 879\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-10-18T14:14:07.000Z\",\r",
													"                \"count\": 859\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-11-14T03:36:49.000Z\",\r",
													"                \"count\": 822\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2020-12-15T06:09:35.000Z\",\r",
													"                \"count\": 902\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-01-26T16:33:40.000Z\",\r",
													"                \"count\": 1844\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-02-07T08:44:23.000Z\",\r",
													"                \"count\": 775\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-03-29T03:30:24.000Z\",\r",
													"                \"count\": 862\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-04-24T23:29:28.000Z\",\r",
													"                \"count\": 817\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-05-14T17:32:41.000Z\",\r",
													"                \"count\": 930\r",
													"            },\r",
													"            {\r",
													"                \"iat\": \"2021-06-10T14:16:44.000Z\",\r",
													"                \"count\": 806\r",
													"            }\r",
													"        ],\r",
													"        \"format\": \"hour_one_day\"\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"getstatistics_short\", pm.variables.replaceIn(\"test-getstatistics-short\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/links/{{getstatistics_short}}/statistics?start=2020-06-01T00:00:00.000Z&end=2021-06-31T04:00:00.000Z&interval=months",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{getstatistics_short}}",
												"statistics"
											],
											"query": [
												{
													"key": "start",
													"value": "2020-06-01T00:00:00.000Z"
												},
												{
													"key": "end",
													"value": "2021-06-31T04:00:00.000Z"
												},
												{
													"key": "interval",
													"value": "months"
												}
											]
										},
										"description": "Returns call informations about the specified link"
									},
									"response": [
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Statistics entity",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"totalCalls\": -93114098.23467813,\n \"distinctCalls\": 57461635.62399888,\n \"calls\": {\n  \"count\": 82366215.9313392,\n  \"frame\": \"1948-04-19\"\n }\n}"
										},
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "get Link Statistics - failure - not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"short\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"getstatistics_short\")\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"getstatistics_short\", pm.variables.replaceIn(\"test-nonexistantshort-short\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/links/{{getstatistics_short}}/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												"{{getstatistics_short}}",
												"statistics"
											]
										},
										"description": "Returns call informations about the specified link"
									},
									"response": [
										{
											"name": "Missing or Invalid Authorization Header.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Statistics entity",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Added as a part of security scheme: bearer",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/links/:short/statistics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"links",
														":short",
														"statistics"
													],
													"variable": [
														{
															"key": "short"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"totalCalls\": -93114098.23467813,\n \"distinctCalls\": 57461635.62399888,\n \"calls\": {\n  \"count\": 82366215.9313392,\n  \"frame\": \"1948-04-19\"\n }\n}"
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_getstatistics}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_getstatistics\");",
											"const password = pm.environment.get(\"keycloak_password_getstatistics\");",
											"",
											"const tokenVariableName = 'bearer_getstatistics';",
											"const tokenExpriyDateVariableName = 'bearer_getstatistics_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "get links",
					"item": [
						{
							"name": "get links - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        JSON.parse(pm.variables.get(\"schema_link\"))\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.test(\"Valid schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.eql([\r",
											"        {\r",
											"            \"id\": \"a9bb860a-5d8d-4e54-bc3c-43eed19bd30a\",\r",
											"            \"short\": \"test-getlinks-5-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-04T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"4e5164ca-6603-4211-862f-e852aa098e92\",\r",
											"            \"short\": \"test-getlinks-4-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-03T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"b865cc8f-4fbc-4e91-8702-4144ffed4675\",\r",
											"            \"short\": \"test-getlinks-3-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 11,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-02T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"f434e6d9-0947-4573-ab0a-6da322833c20\",\r",
											"            \"short\": \"test-getlinks-2-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 24,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-01T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"5d878952-fefa-4fed-bf9a-21dd21720675\",\r",
											"            \"short\": \"test-getlinks-1-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 19,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2020-12-31T23:00:00.000Z\"\r",
											"        }\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								},
								"description": "Returns all links that the user is allowed to see"
							},
							"response": [
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "List of all links",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"urn:uuid:8e9d2429-c5aa-057e-e5e9-41f00d6dbe5f\",\n  \"short\": \"dolor\",\n  \"original\": \"elit veniam\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1982-11-12\",\n  \"nrOfCalls\": 23838228\n },\n {\n  \"id\": \"urn:uuid:27b75281-d508-9b43-8008-af5f50f608cc\",\n  \"short\": \"veniam enim eu occaecat nisi\",\n  \"original\": \"aliquip\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1978-01-22\",\n  \"nrOfCalls\": 22405912\n }\n]"
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "get links - success - (+iat)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        JSON.parse(pm.variables.get(\"schema_link\"))\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.test(\"Valid schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.eql([\r",
											"        {\r",
											"            \"id\": \"5d878952-fefa-4fed-bf9a-21dd21720675\",\r",
											"            \"short\": \"test-getlinks-1-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 19,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2020-12-31T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"f434e6d9-0947-4573-ab0a-6da322833c20\",\r",
											"            \"short\": \"test-getlinks-2-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 24,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-01T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"b865cc8f-4fbc-4e91-8702-4144ffed4675\",\r",
											"            \"short\": \"test-getlinks-3-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 11,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-02T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"4e5164ca-6603-4211-862f-e852aa098e92\",\r",
											"            \"short\": \"test-getlinks-4-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-03T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"a9bb860a-5d8d-4e54-bc3c-43eed19bd30a\",\r",
											"            \"short\": \"test-getlinks-5-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-04T23:00:00.000Z\"\r",
											"        }\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links?sort=+iat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									],
									"query": [
										{
											"key": "sort",
											"value": "+iat"
										}
									]
								},
								"description": "Returns all links that the user is allowed to see"
							},
							"response": [
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "List of all links",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"urn:uuid:8e9d2429-c5aa-057e-e5e9-41f00d6dbe5f\",\n  \"short\": \"dolor\",\n  \"original\": \"elit veniam\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1982-11-12\",\n  \"nrOfCalls\": 23838228\n },\n {\n  \"id\": \"urn:uuid:27b75281-d508-9b43-8008-af5f50f608cc\",\n  \"short\": \"veniam enim eu occaecat nisi\",\n  \"original\": \"aliquip\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1978-01-22\",\n  \"nrOfCalls\": 22405912\n }\n]"
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "get links - success - (-iat)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        JSON.parse(pm.variables.get(\"schema_link\"))\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.test(\"Valid schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.eql([\r",
											"        {\r",
											"            \"id\": \"a9bb860a-5d8d-4e54-bc3c-43eed19bd30a\",\r",
											"            \"short\": \"test-getlinks-5-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-04T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"4e5164ca-6603-4211-862f-e852aa098e92\",\r",
											"            \"short\": \"test-getlinks-4-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-03T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"b865cc8f-4fbc-4e91-8702-4144ffed4675\",\r",
											"            \"short\": \"test-getlinks-3-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 11,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-02T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"f434e6d9-0947-4573-ab0a-6da322833c20\",\r",
											"            \"short\": \"test-getlinks-2-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 24,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-01T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"5d878952-fefa-4fed-bf9a-21dd21720675\",\r",
											"            \"short\": \"test-getlinks-1-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 19,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2020-12-31T23:00:00.000Z\"\r",
											"        }\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links?sort=-iat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									],
									"query": [
										{
											"key": "sort",
											"value": "-iat"
										}
									]
								},
								"description": "Returns all links that the user is allowed to see"
							},
							"response": [
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "List of all links",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"urn:uuid:8e9d2429-c5aa-057e-e5e9-41f00d6dbe5f\",\n  \"short\": \"dolor\",\n  \"original\": \"elit veniam\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1982-11-12\",\n  \"nrOfCalls\": 23838228\n },\n {\n  \"id\": \"urn:uuid:27b75281-d508-9b43-8008-af5f50f608cc\",\n  \"short\": \"veniam enim eu occaecat nisi\",\n  \"original\": \"aliquip\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1978-01-22\",\n  \"nrOfCalls\": 22405912\n }\n]"
								}
							]
						},
						{
							"name": "get links - success - (-calls)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        JSON.parse(pm.variables.get(\"schema_link\"))\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.test(\"Valid schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.eql([\r",
											"        {\r",
											"            \"id\": \"f434e6d9-0947-4573-ab0a-6da322833c20\",\r",
											"            \"short\": \"test-getlinks-2-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 24,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-01T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"4e5164ca-6603-4211-862f-e852aa098e92\",\r",
											"            \"short\": \"test-getlinks-4-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-03T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"a9bb860a-5d8d-4e54-bc3c-43eed19bd30a\",\r",
											"            \"short\": \"test-getlinks-5-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-04T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"5d878952-fefa-4fed-bf9a-21dd21720675\",\r",
											"            \"short\": \"test-getlinks-1-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 19,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2020-12-31T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"b865cc8f-4fbc-4e91-8702-4144ffed4675\",\r",
											"            \"short\": \"test-getlinks-3-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 11,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-02T23:00:00.000Z\"\r",
											"        }\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links?sort=-calls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									],
									"query": [
										{
											"key": "sort",
											"value": "-calls"
										}
									]
								},
								"description": "Returns all links that the user is allowed to see"
							},
							"response": [
								{
									"name": "List of all links",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"urn:uuid:8e9d2429-c5aa-057e-e5e9-41f00d6dbe5f\",\n  \"short\": \"dolor\",\n  \"original\": \"elit veniam\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1982-11-12\",\n  \"nrOfCalls\": 23838228\n },\n {\n  \"id\": \"urn:uuid:27b75281-d508-9b43-8008-af5f50f608cc\",\n  \"short\": \"veniam enim eu occaecat nisi\",\n  \"original\": \"aliquip\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1978-01-22\",\n  \"nrOfCalls\": 22405912\n }\n]"
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "get links - success - (+calls)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        JSON.parse(pm.variables.get(\"schema_link\"))\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.test(\"Valid schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.eql([\r",
											"        {\r",
											"            \"id\": \"b865cc8f-4fbc-4e91-8702-4144ffed4675\",\r",
											"            \"short\": \"test-getlinks-3-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 11,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-02T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"5d878952-fefa-4fed-bf9a-21dd21720675\",\r",
											"            \"short\": \"test-getlinks-1-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 19,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2020-12-31T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"a9bb860a-5d8d-4e54-bc3c-43eed19bd30a\",\r",
											"            \"short\": \"test-getlinks-5-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-04T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"4e5164ca-6603-4211-862f-e852aa098e92\",\r",
											"            \"short\": \"test-getlinks-4-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-03T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"f434e6d9-0947-4573-ab0a-6da322833c20\",\r",
											"            \"short\": \"test-getlinks-2-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 24,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-01T23:00:00.000Z\"\r",
											"        }\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links?sort=+calls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									],
									"query": [
										{
											"key": "sort",
											"value": "+calls"
										}
									]
								},
								"description": "Returns all links that the user is allowed to see"
							},
							"response": [
								{
									"name": "List of all links",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"urn:uuid:8e9d2429-c5aa-057e-e5e9-41f00d6dbe5f\",\n  \"short\": \"dolor\",\n  \"original\": \"elit veniam\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1982-11-12\",\n  \"nrOfCalls\": 23838228\n },\n {\n  \"id\": \"urn:uuid:27b75281-d508-9b43-8008-af5f50f608cc\",\n  \"short\": \"veniam enim eu occaecat nisi\",\n  \"original\": \"aliquip\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1978-01-22\",\n  \"nrOfCalls\": 22405912\n }\n]"
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "get links - success - limit 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        JSON.parse(pm.variables.get(\"schema_link\"))\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.test(\"Valid schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.eql([\r",
											"        {\r",
											"            \"id\": \"a9bb860a-5d8d-4e54-bc3c-43eed19bd30a\",\r",
											"            \"short\": \"test-getlinks-5-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-04T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"4e5164ca-6603-4211-862f-e852aa098e92\",\r",
											"            \"short\": \"test-getlinks-4-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 23,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-03T23:00:00.000Z\"\r",
											"        }\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links?limit=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									],
									"query": [
										{
											"key": "limit",
											"value": "2"
										}
									]
								},
								"description": "Returns all links that the user is allowed to see"
							},
							"response": [
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "List of all links",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"urn:uuid:8e9d2429-c5aa-057e-e5e9-41f00d6dbe5f\",\n  \"short\": \"dolor\",\n  \"original\": \"elit veniam\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1982-11-12\",\n  \"nrOfCalls\": 23838228\n },\n {\n  \"id\": \"urn:uuid:27b75281-d508-9b43-8008-af5f50f608cc\",\n  \"short\": \"veniam enim eu occaecat nisi\",\n  \"original\": \"aliquip\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1978-01-22\",\n  \"nrOfCalls\": 22405912\n }\n]"
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "get links - success - limit 2, offset 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        JSON.parse(pm.variables.get(\"schema_link\"))\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.test(\"Valid schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.eql([\r",
											"        {\r",
											"            \"id\": \"f434e6d9-0947-4573-ab0a-6da322833c20\",\r",
											"            \"short\": \"test-getlinks-2-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 24,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-01T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"5d878952-fefa-4fed-bf9a-21dd21720675\",\r",
											"            \"short\": \"test-getlinks-1-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 19,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2020-12-31T23:00:00.000Z\"\r",
											"        }\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links?limit=2&offset=3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									],
									"query": [
										{
											"key": "limit",
											"value": "2"
										},
										{
											"key": "offset",
											"value": "3"
										}
									]
								},
								"description": "Returns all links that the user is allowed to see"
							},
							"response": [
								{
									"name": "List of all links",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"urn:uuid:8e9d2429-c5aa-057e-e5e9-41f00d6dbe5f\",\n  \"short\": \"dolor\",\n  \"original\": \"elit veniam\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1982-11-12\",\n  \"nrOfCalls\": 23838228\n },\n {\n  \"id\": \"urn:uuid:27b75281-d508-9b43-8008-af5f50f608cc\",\n  \"short\": \"veniam enim eu occaecat nisi\",\n  \"original\": \"aliquip\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1978-01-22\",\n  \"nrOfCalls\": 22405912\n }\n]"
								},
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "get links - success - limit 2, offset 3, sort -calls",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        JSON.parse(pm.variables.get(\"schema_link\"))\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.test(\"Valid schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.eql([\r",
											"        {\r",
											"            \"id\": \"5d878952-fefa-4fed-bf9a-21dd21720675\",\r",
											"            \"short\": \"test-getlinks-1-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 19,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2020-12-31T23:00:00.000Z\"\r",
											"        },\r",
											"        {\r",
											"            \"id\": \"b865cc8f-4fbc-4e91-8702-4144ffed4675\",\r",
											"            \"short\": \"test-getlinks-3-short\",\r",
											"            \"original\": \"https://dein.li\",\r",
											"            \"nrOfCalls\": 11,\r",
											"            \"status\": \"ACTIVE\",\r",
											"            \"iat\": \"2021-01-02T23:00:00.000Z\"\r",
											"        }\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links?limit=2&offset=3&sort=-calls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									],
									"query": [
										{
											"key": "limit",
											"value": "2"
										},
										{
											"key": "offset",
											"value": "3"
										},
										{
											"key": "sort",
											"value": "-calls"
										}
									]
								},
								"description": "Returns all links that the user is allowed to see"
							},
							"response": [
								{
									"name": "List of all links",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"urn:uuid:8e9d2429-c5aa-057e-e5e9-41f00d6dbe5f\",\n  \"short\": \"dolor\",\n  \"original\": \"elit veniam\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1982-11-12\",\n  \"nrOfCalls\": 23838228\n },\n {\n  \"id\": \"urn:uuid:27b75281-d508-9b43-8008-af5f50f608cc\",\n  \"short\": \"veniam enim eu occaecat nisi\",\n  \"original\": \"aliquip\",\n  \"status\": \"ACTIVE\",\n  \"iat\": \"1978-01-22\",\n  \"nrOfCalls\": 22405912\n }\n]"
								},
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links?sort=<string>&limit=<string>&offset=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<string>"
												},
												{
													"key": "offset",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{bearer_getlinks}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const username = pm.environment.get(\"keycloak_username_getlinks\");",
									"const password = pm.environment.get(\"keycloak_password_getlinks\");",
									"",
									"const tokenVariableName = 'bearer_getlinks';",
									"const tokenExpriyDateVariableName = 'bearer_getlinks_expiry_date';",
									"",
									"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
									"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "get statistics global",
					"item": [
						{
							"name": "get global Link Statistics - success - 1 month in days",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = JSON.parse(pm.collectionVariables.get(\"schema_statistics\"));\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"total\": 1089,\r",
											"        \"distinctCalls\": 444,\r",
											"        \"calls\": [\r",
											"            {\r",
											"                \"iat\": \"2020-06-10T01:25:42.000Z\",\r",
											"                \"count\": 37\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-11T18:28:44.000Z\",\r",
											"                \"count\": 28\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-12T14:10:16.000Z\",\r",
											"                \"count\": 31\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-13T11:45:23.000Z\",\r",
											"                \"count\": 36\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-14T03:00:49.000Z\",\r",
											"                \"count\": 40\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-15T03:33:35.000Z\",\r",
											"                \"count\": 38\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-16T01:33:48.000Z\",\r",
											"                \"count\": 38\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-17T06:52:59.000Z\",\r",
											"                \"count\": 36\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-18T11:55:52.000Z\",\r",
											"                \"count\": 25\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-19T13:39:12.000Z\",\r",
											"                \"count\": 47\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-20T12:12:45.000Z\",\r",
											"                \"count\": 33\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-21T03:28:34.000Z\",\r",
											"                \"count\": 48\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-21T22:13:34.000Z\",\r",
											"                \"count\": 37\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-23T20:10:07.000Z\",\r",
											"                \"count\": 36\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-24T15:37:32.000Z\",\r",
											"                \"count\": 31\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-25T14:30:37.000Z\",\r",
											"                \"count\": 38\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-26T04:32:36.000Z\",\r",
											"                \"count\": 39\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-27T14:46:33.000Z\",\r",
											"                \"count\": 48\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-28T14:29:10.000Z\",\r",
											"                \"count\": 46\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-29T20:40:47.000Z\",\r",
											"                \"count\": 28\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-06-30T09:05:57.000Z\",\r",
											"                \"count\": 39\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-01T16:40:04.000Z\",\r",
											"                \"count\": 33\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-02T16:39:37.000Z\",\r",
											"                \"count\": 32\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-03T09:06:12.000Z\",\r",
											"                \"count\": 44\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-03T23:29:26.000Z\",\r",
											"                \"count\": 38\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-05T10:48:53.000Z\",\r",
											"                \"count\": 32\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-06T13:49:20.000Z\",\r",
											"                \"count\": 27\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-07T02:54:06.000Z\",\r",
											"                \"count\": 37\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-08T13:51:51.000Z\",\r",
											"                \"count\": 32\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-09T00:14:15.000Z\",\r",
											"                \"count\": 34\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-09T22:40:19.000Z\",\r",
											"                \"count\": 1\r",
											"            }\r",
											"        ],\r",
											"        \"format\": \"hour_one_day\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"getstatistics_short\", pm.variables.replaceIn(\"test-getstatistics-short\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/global/links/statistics?start=2020-06-10T00:00:00.000Z&end=2020-07-10T00:00:00.000Z&interval=days",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"global",
										"links",
										"statistics"
									],
									"query": [
										{
											"key": "start",
											"value": "2020-06-10T00:00:00.000Z"
										},
										{
											"key": "end",
											"value": "2020-07-10T00:00:00.000Z"
										},
										{
											"key": "interval",
											"value": "days"
										}
									]
								},
								"description": "Returns call informations about the specified link"
							},
							"response": [
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links/:short/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												":short",
												"statistics"
											],
											"variable": [
												{
													"key": "short"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Statistics entity",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links/:short/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												":short",
												"statistics"
											],
											"variable": [
												{
													"key": "short"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"totalCalls\": -93114098.23467813,\n \"distinctCalls\": 57461635.62399888,\n \"calls\": {\n  \"count\": 82366215.9313392,\n  \"frame\": \"1948-04-19\"\n }\n}"
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links/:short/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												":short",
												"statistics"
											],
											"variable": [
												{
													"key": "short"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "get global Link Statistics - success - 2 hours in minutes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = JSON.parse(pm.collectionVariables.get(\"schema_statistics\"));\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"total\": 93,\r",
											"        \"distinctCalls\": 74,\r",
											"        \"calls\": [\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:00:09.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:01:22.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:03:31.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:04:26.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:06:20.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:07:14.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:08:32.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:10:37.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:12:45.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:13:02.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:14:12.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:16:44.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:17:19.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:18:56.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:21:37.000Z\",\r",
											"                \"count\": 3\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:22:48.000Z\",\r",
											"                \"count\": 3\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:24:36.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:25:23.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:26:41.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:30:31.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:31:58.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:34:16.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:35:18.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:36:45.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:37:31.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:39:07.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:40:43.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:41:00.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:42:33.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:43:07.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:48:32.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:50:32.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T02:59:17.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:00:13.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:01:54.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:02:34.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:03:10.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:05:55.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:06:04.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:08:24.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:10:48.000Z\",\r",
											"                \"count\": 4\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:11:27.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:12:43.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:15:17.000Z\",\r",
											"                \"count\": 3\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:16:51.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:17:18.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:18:43.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:19:05.000Z\",\r",
											"                \"count\": 4\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:21:21.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:22:30.000Z\",\r",
											"                \"count\": 4\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:24:54.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:25:24.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:32:18.000Z\",\r",
											"                \"count\": 3\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:34:43.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:37:19.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:38:56.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:48:46.000Z\",\r",
											"                \"count\": 2\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:51:43.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:54:29.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:55:22.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:56:44.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:57:13.000Z\",\r",
											"                \"count\": 1\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-01T03:59:02.000Z\",\r",
											"                \"count\": 1\r",
											"            }\r",
											"        ],\r",
											"        \"format\": \"hour_one_day\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"getstatistics_short\", pm.variables.replaceIn(\"test-getstatistics-short\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/global/links/statistics?start=2021-01-01T02:00:00.000Z&end=2021-01-01T04:00:00.000Z&interval=minutes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"global",
										"links",
										"statistics"
									],
									"query": [
										{
											"key": "start",
											"value": "2021-01-01T02:00:00.000Z"
										},
										{
											"key": "end",
											"value": "2021-01-01T04:00:00.000Z"
										},
										{
											"key": "interval",
											"value": "minutes"
										}
									]
								},
								"description": "Returns call informations about the specified link"
							},
							"response": [
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links/:short/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												":short",
												"statistics"
											],
											"variable": [
												{
													"key": "short"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links/:short/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												":short",
												"statistics"
											],
											"variable": [
												{
													"key": "short"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Statistics entity",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links/:short/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												":short",
												"statistics"
											],
											"variable": [
												{
													"key": "short"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"totalCalls\": -93114098.23467813,\n \"distinctCalls\": 57461635.62399888,\n \"calls\": {\n  \"count\": 82366215.9313392,\n  \"frame\": \"1948-04-19\"\n }\n}"
								}
							]
						},
						{
							"name": "get global Link Statistics - success - 2 years in months",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = JSON.parse(pm.collectionVariables.get(\"schema_statistics\"));\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"total\": 16096,\r",
											"        \"distinctCalls\": 489,\r",
											"        \"calls\": [\r",
											"            {\r",
											"                \"iat\": \"2020-06-26T04:32:36.000Z\",\r",
											"                \"count\": 1090\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-07-11T12:28:53.000Z\",\r",
											"                \"count\": 1114\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-08-02T22:05:16.000Z\",\r",
											"                \"count\": 1196\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-09-15T03:28:24.000Z\",\r",
											"                \"count\": 1176\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-10-18T14:14:07.000Z\",\r",
											"                \"count\": 1169\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-11-14T03:36:49.000Z\",\r",
											"                \"count\": 1153\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2020-12-15T06:09:35.000Z\",\r",
											"                \"count\": 1214\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-01-26T16:33:40.000Z\",\r",
											"                \"count\": 2186\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-02-07T08:44:23.000Z\",\r",
											"                \"count\": 1092\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-03-29T03:30:24.000Z\",\r",
											"                \"count\": 1187\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-04-24T23:29:28.000Z\",\r",
											"                \"count\": 1137\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-05-14T17:32:41.000Z\",\r",
											"                \"count\": 1280\r",
											"            },\r",
											"            {\r",
											"                \"iat\": \"2021-06-26T18:23:45.000Z\",\r",
											"                \"count\": 1102\r",
											"            }\r",
											"        ],\r",
											"        \"format\": \"hour_one_day\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"getstatistics_short\", pm.variables.replaceIn(\"test-getstatistics-short\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/global/links/statistics?start=2020-06-01T00:00:00.000Z&end=2021-06-31T04:00:00.000Z&interval=months",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"global",
										"links",
										"statistics"
									],
									"query": [
										{
											"key": "start",
											"value": "2020-06-01T00:00:00.000Z"
										},
										{
											"key": "end",
											"value": "2021-06-31T04:00:00.000Z"
										},
										{
											"key": "interval",
											"value": "months"
										}
									]
								},
								"description": "Returns call informations about the specified link"
							},
							"response": [
								{
									"name": "Statistics entity",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links/:short/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												":short",
												"statistics"
											],
											"variable": [
												{
													"key": "short"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"totalCalls\": -93114098.23467813,\n \"distinctCalls\": 57461635.62399888,\n \"calls\": {\n  \"count\": 82366215.9313392,\n  \"frame\": \"1948-04-19\"\n }\n}"
								},
								{
									"name": "Missing or Invalid Authorization Header.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links/:short/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												":short",
												"statistics"
											],
											"variable": [
												{
													"key": "short"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: bearer",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/links/:short/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"links",
												":short",
												"statistics"
											],
											"variable": [
												{
													"key": "short"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"postman.setGlobalVariable(\"function_generateAccessTokenIfNeeded\",",
					" (username, password, tokenVariableName, tokenExpriyDateVariableName) => {",
					"    var t = new Date();",
					"",
					"    if(!pm.collectionVariables.get(tokenExpriyDateVariableName)",
					"       || pm.collectionVariables.get(tokenExpriyDateVariableName) < t.toISOString()",
					"       || !pm.collectionVariables.get(tokenVariableName)) {",
					"        var server       = pm.environment.get(\"keycloak_url\")",
					"        var realm        = pm.environment.get(\"keycloak_realm\")",
					"        var grantType    = \"password\";",
					"        var clientId     = pm.environment.get(\"keycloak_client_id\")",
					"        var clientSecret = pm.environment.get(\"keycloak_client_secret\");",
					"",
					"        var url  = `${server}/auth/realms/${realm}/protocol/openid-connect/token`;",
					"        var data = `grant_type=${grantType}&client_id=${clientId}&username=${username}&password=${password}&client_secret=${clientSecret}`;",
					"",
					"        pm.sendRequest({",
					"            url: url,",
					"            method: 'POST',",
					"            header: { 'Content-Type': 'application/x-www-form-urlencoded'},",
					"            body: {",
					"                mode: 'raw',",
					"                raw: data",
					"            }",
					"        },  function(err, response) {",
					"            var response_json = response.json();",
					"            var token = response_json.access_token;",
					"            pm.collectionVariables.set(tokenVariableName, token);",
					"",
					"            var t = new Date();",
					"            t.setSeconds(t.getSeconds() + response_json.expires_in);",
					"",
					"            pm.collectionVariables.set(tokenExpriyDateVariableName, t);",
					"        });",
					"    }",
					"});",
					"",
					"",
					"postman.setGlobalVariable(\"test_correctErrorResponseSchema\", (response) => {",
					"    const schema = JSON.parse(pm.collectionVariables.get(\"schema_error\"));",
					"",
					"    pm.test(\"Validate schema\", () => {",
					"        response.to.have.jsonSchema(schema);",
					"    });",
					"});",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "schema_link",
			"value": "{\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": { \"type\": \"string\"},\n                \"short\": { \"type\": \"string\" },\n                \"original\": { \"type\": \"string\" },\n                \"status\": { \"type\": \"string\" },\n                \"iat\": { \n                    \"type\": \"string\",\n                    \"format\": \"date-time\"    \n                },\n\t\t\t\t\"nrOfCalls\": { \"type\": \"number\" }\n            },\n            \"required\": [ \"id\", \"short\", \"original\", \"status\", \"iat\" ],\n            \"additionalProperties\": false\n        }"
		},
		{
			"key": "schema_error",
			"value": "{\n        \"type\": \"object\",\n        \"properties\": {\n            \"code\": { \"type\": \"string\"},\n            \"message\": { \"type\": \"string\" },\n            \"data\":  {\n                \"anyOf\": [\n                    { \n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"attribute\": { \"type\": \"string\" },\n                            \"value\": { \"type\": \"string\" },\n                            \"in\": { \"type\": \"string\" },\n                            \"message\": { \"type\": \"string\" }\n                        },\n                        \"required\": [\n                            \"attribute\",\n                            \"value\"\n                        ] \n                    },\n                    { \"type\": \"string\" },\n                    { \n                        \"type\": \"array\",\n                        \"items\": {\n                            \"anyOf\": [\n                                { \"type\": \"object\" },\n                                { \"type\": \"string\" }\n                            ]\n                        }\n                    }\n                ]\n            }\n        },\n        \"required\": [\"code\", \"message\"],\n        \"additionalProperties\": false\n    }"
		},
		{
			"key": "schema_statistics",
			"value": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"total\": { \"type\": \"number\"},\n        \"distinctCalls\": { \"type\": \"number\" },\n        \"calls\": {\n            \"type\": \"array\",\n            \"items\": [\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"iat\": {\n                             \"type\": \"string\",\n                             \"format\": \"date-time\"\n                        },\n                        \"count\": { \"type\": \"number\" }\n                    } \n                }\n            ]\n        },\n        \"format\": { \"type\": \"string\" }\n    },\n    \"required\": [\"total\", \"distinctCalls\", \"calls\"],\n    \"additionalProperties\": false\n}"
		},
		{
			"key": "bearer_createlink_auth",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTM1OTEwODEsImlhdCI6MTYxMzU5MDc4MSwianRpIjoiZjA5NTQ0YzItOWMxYi00NTIwLTg5N2MtYWY0ZDIyY2Y3ZTg2IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJmNDA2YzFhMC1lYTQ2LTQyMjktYTgzZS1iYmE5YjVkMmYzMTMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6Ijg4N2VhNDc3LTkyMDMtNGY2Yy1iNjhlLWM2N2YxMGNhMjZjMCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiVGVzdFVzZXIgQ3JlYXRlTGluayIsInByZWZlcnJlZF91c2VybmFtZSI6InRlc3QtY3JlYXRlbGluay11c2VyIiwiZ2l2ZW5fbmFtZSI6IlRlc3RVc2VyIiwiZmFtaWx5X25hbWUiOiJDcmVhdGVMaW5rIiwiZW1haWwiOiJ0ZXN0LWNyZWF0ZWxpbmstdXNlckB0ZXN0aW5nLmRlaW4ubGkifQ.UBIEb-zf21x-JZLVAsSMsyJNBAdcleCGbfStSOdg5saXCcgbeQh0jv0CUoKcmW3uzk8u9A68_fBnlLP1yys33XDzwVb-LQtwtNejrVPL4cP10Y9cKG7YHUztXfcgze5A_xEfNyFrAA4BIypzfP09g4N3hj7hkA51PixKXwA3iI425zTPwvwTy6tm_h-6HrbfaGsxCQaI6eUSS_sMACAHuL2iOZOClx5eV3VW7yDGz4p2u6BUSNZxHYpZIwgYYcBVaNDliVtpDGfMvkh3-4FxWctjDgYJj21d2Uyhilhih80kRiEYa6pg-HVNPPZwPEg75_NnnWx2p7XmT9wg_eck2g"
		},
		{
			"key": "bearer_createlink_auth_expiry_date",
			"value": "2021-02-17T19:44:41.664Z"
		},
		{
			"key": "validate_createlink_id",
			"value": "f74d49f7-ca06-4ab6-bb9e-dab9fffca4bb"
		},
		{
			"key": "validate_createlink_location_header",
			"value": "localhost:3000/links/cxM3UnOKM7E2yad"
		},
		{
			"key": "validate_createlink_original",
			"value": "https://roberto.net"
		},
		{
			"key": "validate_createlink_short",
			"value": "cxM3UnOKM7E2yad"
		},
		{
			"key": "bearer_createversion",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTM1OTA5MTcsImlhdCI6MTYxMzU5MDYxNywianRpIjoiYmUzM2Y0NGYtNzYxNS00NGI1LTgyOTktNjY4Y2FlZGQwMWYwIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIxZTBmZjA3Mi04ZmE1LTRiYTEtOTJlYS03Mzg5MDFjZGZkOGUiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjA4NTQ0MmRjLTA1NDktNDdiZC05NjU3LTVhZDNlM2ZkNzRhMCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiQ3JlYXRlVmVyc2lvbiBUZXN0VXNlciIsInByZWZlcnJlZF91c2VybmFtZSI6InRlc3QtY3JlYXRldmVyc2lvbi11c2VyIiwiZ2l2ZW5fbmFtZSI6IkNyZWF0ZVZlcnNpb24iLCJmYW1pbHlfbmFtZSI6IlRlc3RVc2VyIiwiZW1haWwiOiJ0ZXN0LWNyZWF0ZXZlcnNpb24tdXNlckB0ZXN0aW5nLmRlaW4ubGkifQ.XXVp_pRvxkcoNiuNdPL3t298FzAExHav8a_DOvTPe9D2aDD6BYA-WOY8G0cZhzNF5hi5Epw_Ip9Lsf-ZnAOkpT3iewkKAcg-ZfkzXhYpkbPG0Ni4vLPhh08GK1x4gfA4eUCfdeSKE1B3EngaMb4FhFbPA5Q5hPDAjSN63TRd4Ap-uMEp9UXJP3Dz7mUWkeDbnIrwaxJjJCvLLAXWuiU1G3cBHC92o8upQIRO8UcJTZ7FVKpLTzmzKPkBjAmt-XyduCNrCxsDmr3RebIqUCCt05B2pQDbalHoAtk7_NgffVqL7-lopefxNISvj71qahE_7PWUI-UKvYbHbsuA450gjA"
		},
		{
			"key": "bearer_createversion_expiry_date",
			"value": "2021-02-17T19:41:57.184Z"
		},
		{
			"key": "validate_createversion_id",
			"value": "1b651bc0-84d7-4708-b5d5-c00abd41563d"
		},
		{
			"key": "validate_createversion_original",
			"value": "https://bennie.org"
		},
		{
			"key": "validate_createversion_short",
			"value": "test-createversion-short"
		},
		{
			"key": "bearer_getversions",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTM1OTA5MTgsImlhdCI6MTYxMzU5MDYxOCwianRpIjoiMjdhOGYzNzYtZDc2OC00MDNhLWI0YzYtYjdjOTJiNWMzZjY2IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIxNTA1NmI3Yy00ZDE2LTRlZDEtODg2Mi0zZTdhZTU3YTA4MTkiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjQ0ZGVmYThhLTMyYjMtNDVkOC1hNGNlLWI2OWY2NmZiNDUxOCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR2V0VmVyc2lvbiBUZXN0VXNlciIsInByZWZlcnJlZF91c2VybmFtZSI6InRlc3QtZ2V0dmVyc2lvbnMtdXNlciIsImdpdmVuX25hbWUiOiJHZXRWZXJzaW9uIiwiZmFtaWx5X25hbWUiOiJUZXN0VXNlciIsImVtYWlsIjoidGVzdC1nZXR2ZXJzaW9ucy11c2VyQHRlc3RpbmcuZGVpbi5saSJ9.POI80jrlviUF8vwsY5DP2ww5Qlfb7x8P7ILbyDm2EiLgoRzTchCTE5ri9SO_hqibMoRyb1EluTqfQawQp_YVi1eZbhgUahJ_7MW2VwzhpTVVLno0Jeions0CbUiS6fyvk5NCgjS0vGDSZFEuSC1NXgWvuMJZ3ZpdSN0lTyAYZr_4e3xPvrsKiyT2aAKKgfp8egrEFT2_OaWh6RTB8DRl58_YpcWaN56Ms5qVtYImZYlOjzoPinfxQ7PHnjpiuoEbmm4WgxR2hshcsfJzK1450vo6hnyML2vRrJm1VpNWVKqLQPUBX-uGonxjPYoVNhb2dv60Gvb5pQZrw2WCBZmW6A"
		},
		{
			"key": "bearer_getversions_expiry_date",
			"value": "2021-02-17T19:41:58.602Z"
		},
		{
			"key": "bearer_getstatistics",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTM1OTA5MTksImlhdCI6MTYxMzU5MDYxOSwianRpIjoiYmYzYjJlNTUtNTgwOS00YjFjLWJmOTQtNTUyOWZkNDllOWU2IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJhNzhjMjU2ZC1kNDc2LTRkM2QtYjQ0My1hNmZkOWI0NmYzYjYiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6ImY1NDgxNDc1LWUzMDItNDIwZS1hMjI1LTIwMzUxNThmZjA2ZCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR2V0U3RhdGlzdGljcyBUZXN0VXNlciIsInByZWZlcnJlZF91c2VybmFtZSI6InRlc3QtZ2V0c3RhdGlzdGljcy11c2VyIiwiZ2l2ZW5fbmFtZSI6IkdldFN0YXRpc3RpY3MiLCJmYW1pbHlfbmFtZSI6IlRlc3RVc2VyIiwiZW1haWwiOiJ0ZXN0LWdldHN0YXRpc3RpY3MtdXNlckB0ZXN0aW5nLmRlaW4ubGkifQ.b3_Qx43CWNP3RyjgEesArZ3iSyMEzJ5v0AKlbOnU74KmmxSsn_CY8oTf-i3CRRiwDY4ArnJ5LcrC_IkqSiyUPzj4CplnitpiHQFmLJ1wlVN79-r-A_9oVyCOiToWVva1z_Vve6jH1oHAI_3tSQgTgJjeA3vqngCHNtLHbxP5A_eIFAxXlRdYPMmSiO85x5cHzILT9xSli0JpMceGX-ICcYqr_B7KaBK8mLxMnzdmsHtE2-3Omgk-KN6M-04fY4deJ0M1omUsyezbWlGAJ5_TEWAJvQxMWO9VhAp_COgu9GSkMLhcPAy-Gw4sy-cPmEIzo_KSyoBZobOf9DTsL7fspQ"
		},
		{
			"key": "bearer_getstatistics_expiry_date",
			"value": "2021-02-17T19:41:59.154Z"
		},
		{
			"key": "bearer_getlinks",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTM1OTA5MjAsImlhdCI6MTYxMzU5MDYyMCwianRpIjoiOWQzOGY0NmMtZTRhZS00YjM2LWI4M2YtMzAzMWQxZjIyOGZiIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIzNTkxMTc3OC04YTIxLTRhYTctYmQ5Mi0xM2M4YjdiYWMzY2UiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjY4MWI5MWY3LTc0NDAtNDY1Ni05Mzc3LTljOTU1NDlhYmUyZiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR2V0TGlua3MgVGVzdFVzZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0LWdldGxpbmtzLXVzZXIiLCJnaXZlbl9uYW1lIjoiR2V0TGlua3MiLCJmYW1pbHlfbmFtZSI6IlRlc3RVc2VyIiwiZW1haWwiOiJ0ZXN0LWdldGxpbmtzLXVzZXJAdGVzdGluZy5kZWluLmxpIn0.AQC5IeYzRaCl9ugJ9kUqMZV-F9dZJ2Z4srD030yIQOd6Vsmdc67qQtu9nmjcECzt2HaJE96XGDbtpYuNIy9IUBH0ncAxvcqTBdxJATm6U3n3rfVKDb8FuIO4FGYZIsV0D-YLEPR9R8PqEsMGoFZjwYJxpEbTVic1jmRnZvVO18wP8yxVUOFJX7PWpObn5_AsN0ZmEvyslySz54nuKy9tb2xwcUOI42Ph8IBNlyRtP39qoDlAoPpDcDtVGKm66TX5WWZtgb0SShC0C_XzkGMOP1zutVOZzUYH_ABQ9Ju15OA-LN3BEXItOR0QTPZZq-PqNxWo2oi3WV5zaZF4moH6fw"
		},
		{
			"key": "bearer_getlinks_expiry_date",
			"value": "2021-02-17T19:42:00.717Z"
		}
	]
}